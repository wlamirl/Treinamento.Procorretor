@page "/index"
@rendermode InteractiveServer

@if (videos == null)
{
  <FluentProgressRing Style="width:30px;height:30px" />
}
else
{
@* file-upload *@
@* video-form *@
@*  *@
    <FluentStack HorizontalAlignment="HorizontalAlignment.End">
        <FluentAnchor Href="/Admin/video-form"
                      IconStart="@(new Icons.Regular.Size24.PersonAdd().WithColor(Color.Success))">
            Novo Vídeo
        </FluentAnchor>
    </FluentStack>

    <div class="grid">
    <FluentDataGrid Id="videogrid" Items=@videos TGridItem=VideoModel Pagination="@pagination">
           <TemplateColumn Title="Avatar" Align="Align.Start">
                @if (@context.Thumbnail is not null)
                {
                    <FluentPersona ImageSize ="50px" Image="@context.Thumbnail" />
                }
                else
                {
                    <FluentPersona ImageSize="50px"  Initials="@context.Title![0].ToString().ToUpper()" />
                }
            </TemplateColumn>
        <PropertyColumn Title="Título" Property="@(c => c!.Title)" Sortable="true" Align=Align.Start/>
        <PropertyColumn Title="Tag" Property="@(c => c!.Tag)" Sortable="true" Align=Align.Start/>
        <PropertyColumn Title="Link" Property="@(c => c!.UrlVideo)" Sortable="true" Align=Align.Center/>
        <TemplateColumn Align="@Align.End">
            <FluentButton Appearance="Appearance.Outline" OnClick="()=>ConfirmarExclusao(context.Id)"
                          IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Error))">Deleta</FluentButton>

            <FluentAnchor IconStart="@(new Icons.Regular.Size24.Edit().WithColor(Color.Success))"
                          Appearance="Appearance.Outline"
                          Href="@($"/Admin/video-form/{context.Id}")">Edita</FluentAnchor>
        </TemplateColumn>
    </FluentDataGrid>
    </div>
    <br />
    <div class="page-buttons" >
       
        @if (pagination.TotalItemCount.HasValue)
        {
            for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
            {
                var capturedIndex = pageIndex;
                <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))"
                              Appearance="@PageButtonAppearance(capturedIndex)"
                              aria-current="@AriaCurrentValue(capturedIndex)"
                              aria-label="@AriaLabel(capturedIndex + 1)">
                    @(capturedIndex + 1)
                </FluentButton>
            }
        }
    </div>
}

@code {
    private IQueryable<VideoModel>? videos;

    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        await CarregaVideos();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged(); 
        await base.OnInitializedAsync();
    }

    private async Task CarregaVideos()
    {
        @* var videosList = await _videoService.GetVideos();
        videos = videosList?.AsQueryable(); *@
        await _youtubeService.GetPlayList();
    }

    private async Task ConfirmarExclusao(int id)
    {
        var dialog = await DialogService
                          .ShowConfirmationAsync($"Confirma exclusão do vídeo de id={id} ?",
                          "Sim", "Não", "Deletar Vídeo");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(id);
        }
        else
        {
            ToastService.ShowInfo($"Operação cancelada");
        }
    }

    private async Task Delete(int id)
    {
        var vid = await _videoService.GetVideo(id);

        if (vid is null)
        {
            ToastService.ShowError($"Vídeo com id={id} não encontrado");
            return;
        }

        var result = await _videoService.DeleteVideo(vid.Id);

        if (result is not null)
        {
            ToastService.ShowSuccess("Vídeo excluído com sucesso!");
            await CarregaVideos();
        }
        else
        {
            ToastService.ShowError($"Não foi possível excluir o vídeo com id={id}");
        }
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string AriaLabel(int pageIndex) => $"Ir para pag. {pageIndex}";
}