@page "/admin/videos"
@using static Treinamento.Procorretor.Domain.PlayListJson
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@inject IDialogService _dialogService

@if (playlist == null)
{
  <FluentProgressRing Style="width:30px;height:30px" />
}
else
{
  <AuthorizeView>
  <FluentStack Style="margin-bottom: 24px; width=100%" HorizontalAlignment="HorizontalAlignment.Center">
    <FluentLabel Typo="Typography.PageTitle" Alignment="HorizontalAlignment.Center" Color="Color.Accent">
      Vídeos do Youtube
    </FluentLabel>
  </FluentStack>

  <FluentDivider></FluentDivider>
  <br />
  <FluentStack HorizontalAlignment="HorizontalAlignment.End">
  <br />
    <FluentAnchor Href="/Admin/video-form" IconStart="@(new Icons.Regular.Size24.PersonAdd().WithColor(Color.Success))">
      Novo Vídeo
    </FluentAnchor>
  </FluentStack>
  <div class='grid' style='width: 100%;'>
  <FluentDataGrid GenerateHeader="GenerateHeaderOption.None" 
      GridTemplateColumns="20% 20% 50% 15%" TGridItem="string"
      style="width: 100%;">
      <FluentDataGridRow RowType="DataGridRowType.Header">
        <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.RowHeader">
          <FluentLabel Typo="Typography.H4" Alignment="HorizontalAlignment.Center" Weight="FontWeight.Bold">ID</FluentLabel>
        </FluentDataGridCell>
        <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.RowHeader">
          <FluentLabel Typo="Typography.H4" Alignment="HorizontalAlignment.Center" Weight="FontWeight.Bold">Vídeo</FluentLabel>
        </FluentDataGridCell>
        <FluentDataGridCell GridColumn="3" CellType="DataGridCellType.RowHeader">
          <FluentLabel Typo="Typography.H4" Alignment="HorizontalAlignment.Center" Weight="FontWeight.Bold">Título</FluentLabel>          
        </FluentDataGridCell>
        <FluentDataGridCell GridColumn="4" CellType="DataGridCellType.RowHeader">
          <FluentLabel Typo="Typography.H4" Alignment="HorizontalAlignment.Center" Weight="FontWeight.Bold">Ações</FluentLabel>          
        </FluentDataGridCell>
      </FluentDataGridRow>
  
      @foreach (var @sitem in @playlist!)
      {
        @foreach (var @snip in @sitem.snippets!)
        {             
          titulo = snip.title;
          if (titulo?.Length > 20)
          {
            titulo = titulo.Substring(0, 20);
          }
          emb = "http://www.youtube.com/embed/" + @snip.resourceId?.videoId;
          
          <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1" Tooltip="true" TooltipText="@snip.resourceId!.videoId">@snip.resourceId!.videoId</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" Tooltip="true" TooltipText="@snip.resourceId!.videoId">
              <FluentAnchor Href="@emb" Appearance="Appearance.Stealth" Target="_blank">
                <img src='@snip.thumbnails?.Default?.url' style='width: 90%;' />
              </FluentAnchor>                  
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="3">@snip.title</FluentDataGridCell>
            <FluentDataGridCell GridColumn="4">
              <FluentButton Appearance="Appearance.Outline" OnClick="()=>ConfirmarExclusao(snip.resourceId!.videoId!)"
                            IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Error))">
              </FluentButton>

              <FluentAnchor IconStart="@(new Icons.Regular.Size24.Edit().WithColor(Color.Success))"
                            Appearance="Appearance.Outline"
                            Href="@($"/Admin/video-form/{snip.resourceId!.videoId}")">
              </FluentAnchor>                  
            </FluentDataGridCell>

          </FluentDataGridRow>
        }
      }
      @*
    <FluentGridItem Style="min-width: 200px;">
    <div class='card'>
    Total de itens no playlist: @totalResults
    </div>
    </FluentGridItem>
    <FluentGridItem Style="min-width: 200px;">
    <div class='card'>
    Total de itens públicos no playlist: @count
    </div>
    </FluentGridItem>
    </p> *@
  </FluentDataGrid>
</div>
</AuthorizeView>
  <br />
  <div class="page-buttons">

  @if (pagination.TotalItemCount.HasValue)
    {
      for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
      {
        var capturedIndex = pageIndex;
        <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))" Appearance="@PageButtonAppearance(capturedIndex)"
          aria-current="@AriaCurrentValue(capturedIndex)" aria-label="@AriaLabel(capturedIndex + 1)">
          @(capturedIndex + 1)
        </FluentButton>
      }
    }
  </div>
}

@code {
    private string? emb { get; set; } = string.Empty;
    private string? titulo { get; set; } = string.Empty;
    private List<YoutubePlayList>? playlist { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    public int totalResults = 0;
    public List<string> Videos = new();
    private int count = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        await CarregaVideos();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task CarregaVideos()
    {
        var obj = await _youtubeService.GetVideosPlayListAsync();

    playlist = JsonConvert.DeserializeObject<List<YoutubePlayList>>(obj)!;
  }

  private void ShowResult(dynamic result)
  {
    count = result.items.Count;
    totalResults = result.pageInfo.TotalResults;

    if (count > 0)
      foreach (var item in result.items)
      {
        Videos.Add(item.snipped.title);
      }
  }

  private async Task GoToPageAsync(int pageIndex)
  {
    await pagination.SetCurrentPageIndexAsync(pageIndex);
  }

  private Appearance PageButtonAppearance(int pageIndex)
  => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

  private string? AriaCurrentValue(int pageIndex)
  => pagination.CurrentPageIndex == pageIndex ? "page" : null;

  private string AriaLabel(int pageIndex) => $"Ir para pag. {pageIndex}";

    private async Task ConfirmarExclusao(string id)
    {
        var dialog = await DialogService
                          .ShowConfirmationAsync($"Confirma exclusão do vídeo de id={id} ?",
                          "Sim", "Não", "Deletar Vídeo");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(id);
        }
        else
        {
            ToastService.ShowInfo($"Operação cancelada");
        }
    }

    private async Task Delete(string id)
    {
        @* var vid = await _videoService.GetVideo(id);

        if (vid is null)
        {
            ToastService.ShowError($"Vídeo com id={id} não encontrado");
            return;
        }

        var result = await _videoService.DeleteVideo(vid.Id);

        if (result is not null)
        {
            ToastService.ShowSuccess("Vídeo excluído com sucesso!");
            await CarregaVideos();
        }
        else
        {
            ToastService.ShowError($"Não foi possível excluir o vídeo com id={id}");
        } *@
    }  
}